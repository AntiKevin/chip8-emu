package emulator

import "os"

type memory struct {
	ram [4096]uint8
}

var fontSet = [80]uint8{
	0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
	0x20, 0x60, 0x20, 0x20, 0x70, // 1
	0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
	0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
	0x90, 0x90, 0xF0, 0x10, 0x10, // 4
	0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
	0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
	0xF0, 0x10, 0x20, 0x40, 0x40, // 7
	0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
	0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
	0xF0, 0x90, 0xF0, 0x90, 0x90, // A
	0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
	0xF0, 0x80, 0x80, 0x80, 0xF0, // C
	0xE0, 0x90, 0x90, 0x90, 0xE0, // D
	0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
	0xF0, 0x80, 0xF0, 0x80, 0x80, // F
}

func newMemory() *memory {
	mem := &memory{
		ram: [4096]uint8{},
	}
	mem.loadFontSet()
	return mem
}

func (m *memory) LoadROM(cpu *cpu, romPath string, memory []uint8) error {
	data, err := os.ReadFile(romPath)
	if err != nil {
		return err
	}
	copy(memory[0x200:], data)
	return nil
}

func (m *memory) loadFontSet() {
	copy(m.ram[:], fontSet[:])
}

func (m *memory) readByte(address uint16) uint8 {
	return m.ram[address]
}

func (m *memory) writeByte(address uint16, value uint8) {
	m.ram[address] = value
}
